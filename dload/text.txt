In this article, we will guide you through the process of adding download buttons to retrieve data stored in the database using Django. Whether you are building a content management system, or an e-commerce system, allowing users to download data is a common and essential feature.
Introduction
Downloading data from a web application is a fundamental user interaction. Whether it a downloading reports, images, or documents, providing an efficient way for users to access and save data is crucial for a seamless user experience.
In this tutorial, we will focus on the Django project and demonstrate how to create download buttons to retrieve and save data stored in the database. we will explore the key concepts, necessary steps, and examples to showcase this functionality

Key Terminologies:
Django Models: In Django, models define the structure of the database tables. We will use this model to store the data that can be retrieved and downloaded.
Views and Templates: Django views handled HTTP requests and rendered templates to generate HTML. we will create views to trigger the download process and templates to display download buttons.
File Handling: When it comes to downloading files, Django provides tools for managing file uploads and downloads. We'll leverage Django's file-handling capabilities to retrieve and serve files from the database.
MEDIA_URL: This setting defines the base URL under which media files are accessible to users. Commonly set to /media/, it allows Django to generate URLs for media files, making them accessible through the web browser.
MEDIA_ROOT:  This setting specifies the local file system path where media files are stored on the server. Django uses this path to locate and serve media files when requested by users.

Let's go through a simple project example in which we are uploading cheatsheets from the Django admin panel. On the home page display it to the user with a download button.
Steps Needed: 
1. Setup Your Django Project: This will create a project directory for you and inside it, we have to create an app.
django-admin startproject dload 
cd dload
python manage.py startapp filedownloadapp
2. Define Model: To upload files from admin panel, we need a cheatsheet model that will containe file title, file path.
# Add this into filedownloadapp/models.py file
from django.db import models

# Create your models here.

class Cheatsheet(models.Model):
    title = models.CharField(max_length=100)
    file = models.FileField(upload_to='cheatsheets/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title
    
    
3. Register model: we have defined the model and now register it into admin.py file.
from django.contrib import admin
from .models import *
admin.site.register(Cheatsheet)
4. Create views: To show and download files we need to add some function procedures. Add this into filedownloadapp/views.py file.
Here, 2 functions we have created. cheatsheet function will render all files. and other download_cheatsheet is our downloading buttons function.
from django.shortcuts import render, HttpResponse
from .models import *
from django.http import FileResponse
from django.shortcuts import get_object_or_404
from .models import Cheatsheet

def download_cheatsheet(request, cheatsheet_id):
    cheatsheet = get_object_or_404(Cheatsheet, pk=cheatsheet_id)
    file_path = cheatsheet.file.path
    response = FileResponse(open(file_path, 'rb'))
    response['Content-Type'] = 'application/octet-stream'
    response['Content-Disposition'] = f'attachment; filename="{cheatsheet.title}"'
    return response

def cheatsheet(request):
    files = Cheatsheet.objects.all()
    print(files)
    context = {
        'files' : files
    }
    return render(request, './home.html', context)
5. Define urls.py:
 i] We have 2 folders one of it is base project  "dload" and other is "filedownloadapp". to pass the incoming request from the base project folder to app we will need to create urls. 
ii] To enable above functions  we need to create urls in the "filedownloadapp" also.
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
# add into dload/urls.py
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('filedownloadapp.urls'))
]
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

from django.contrib import admin
from django.urls import path
from . import views
# add into filedownloadapp/urls.py
urlpatterns = [
    path('', views.cheatsheet, name="cheatsheet"),
    path('download/<int:cheatsheet_id>/', views.download_cheatsheet, name='download_cheatsheet'),
]

6]  Define Settings.py: 
# first we should register our application
INSTALLED_APPS = [
   "........................."
    'filedownloadapp'
]

# create a folder inside base project named it as "templates". Add its name into dir.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {.......}
]

# setup database 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Add media settings 
import os
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

Now, we have setup our project and understood how we are uploading the files from admin panels and making the files downloadable for users on home page. I am providing you a home.html template you should add it into your templates folder. 
<!DOCTYPE html>
<html>
<head>
    <title>Download Programming Cheatsheets</title>
</head>
<style>
    .container {
        width: 500px;
        height: 100%;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .card{
        width: 100%;
        height: auto;
        border-radius: 10px;
        border: 1px dashed black;
        padding: 1rem;
        margin-top: 10px;
    }

    h1{
        text-align: center;
        font-size: 4em;
    }

    button{
        padding : 5px 5px;
        color: green;
    }

    a{text-decoration:none; color: inherit;}
</style>
<body>
    <div class="container">
        <h1>Cheatsheets</h1>
        {% for file in files %}
        <div class="card">
            <h2>{{file.title}}</h2>
            <button > <a href="{% url 'download_cheatsheet' file.id %}">Download</a></button>
        </div>
        {% endfor %}

    </div>
</body>
</html>



7. Create a superuser and access admin panel. Try to upload and create 2-3 cheatsheets files.
# python manage.py createsuperuser
# python manage.py runserver



























